{"ast":null,"code":"var _jsxFileName = \"/Users/lamn/Downloads/github/redux-start/src/App.js\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { increment, decrement } from \"./action/Counter\";\nimport { isLoad } from \"./action/IsLoad\";\nimport { item } from \"./action/Item\";\nimport ManagerProducts from \"./container/ManagerProducts/index\";\n\nfunction App() {\n  const counter = useSelector(state => state.count);\n  const load = useSelector(state => state.load);\n  const item = useSelector(state => state.item);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, load ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(isLoad()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"load\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(isLoad()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, \"logout\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(increment()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, \"increment\"), \"My counter is \", counter, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(decrement()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, \" decrement \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(item()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"item\"), /*#__PURE__*/React.createElement(ManagerProducts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), console.log(item));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/lamn/Downloads/github/redux-start/src/App.js"],"names":["React","useSelector","useDispatch","increment","decrement","isLoad","item","ManagerProducts","App","counter","state","count","load","dispatch","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,kBAArC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,OAAO,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAA3B;AACA,QAAMC,IAAI,GAAGX,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACE,IAAlB,CAAxB;AACA,QAAMN,IAAI,GAAGL,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACJ,IAAlB,CAAxB;AAEA,QAAMO,QAAQ,GAAGX,WAAW,EAA5B;AAEA,sBACE,0CACGU,IAAI,gBACH;AAAQ,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAACR,MAAM,EAAP,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,gBAGH;AAAQ,IAAA,OAAO,EAAE,MAAMQ,QAAQ,CAACR,MAAM,EAAP,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAOE;AAAQ,IAAA,OAAO,EAAE,MAAMQ,QAAQ,CAACV,SAAS,EAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPF,oBAQiBM,OARjB,eASE;AAAQ,IAAA,OAAO,EAAE,MAAMI,QAAQ,CAACT,SAAS,EAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATF,eAUE;AAAQ,IAAA,OAAO,EAAE,MAAMS,QAAQ,CAACP,IAAI,EAAL,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAYGQ,OAAO,CAACC,GAAR,CAAYT,IAAZ,CAZH,CADF;AAgBD;;AAED,eAAeE,GAAf","sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { increment, decrement } from \"./action/Counter\";\nimport { isLoad } from \"./action/IsLoad\";\nimport { item } from \"./action/Item\";\nimport ManagerProducts from \"./container/ManagerProducts/index\";\n\nfunction App() {\n  const counter = useSelector((state) => state.count);\n  const load = useSelector((state) => state.load);\n  const item = useSelector((state) => state.item);\n\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {load ? (\n        <button onClick={() => dispatch(isLoad())}>load</button>\n      ) : (\n        <button onClick={() => dispatch(isLoad())}>logout</button>\n      )}\n      <br />\n      <button onClick={() => dispatch(increment())}>increment</button>\n      My counter is {counter}\n      <button onClick={() => dispatch(decrement())}> decrement </button>\n      <button onClick={() => dispatch(item())}>item</button>\n      <ManagerProducts />\n      {console.log(item)}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}