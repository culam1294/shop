{"ast":null,"code":"import { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, useMemo, cloneElement, Fragment } from 'react';\n\nvar isUndefined = val => val === undefined;\n\nvar isNullOrUndefined = value => value === null || isUndefined(value);\n\nvar isArray = value => Array.isArray(value);\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = value => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nconst VALUE = 'value';\nconst UNDEFINED = 'undefined';\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\nconst REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners({\n  field: {\n    ref\n  },\n  handleChange,\n  isRadioOrCheckbox\n}) {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isKey = value => !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = string => {\n  const result = [];\n  string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = data => Object.entries(data).reduce((previous, [key, value]) => {\n  if (!isKey(key)) {\n    set(previous, key, value);\n    return previous;\n  }\n\n  return Object.assign(Object.assign({}, previous), {\n    [key]: value\n  });\n}, {});\n\nvar get = (obj, path, defaultValue) => {\n  const result = path.split(/[,[\\].]+?/).filter(Boolean).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? obj[path] || defaultValue : result;\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = element => element.type === 'radio';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\nfunction baseGet(object, path) {\n  const updatePath = isKey(path) ? [path] : castPath(path);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return index == length ? object : undefined;\n}\n\nfunction baseSlice(array, start, end) {\n  let index = -1;\n  let length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start;\n  const result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nfunction baseUnset(object, path) {\n  const updatePath = isKey(path) ? [path] : castPath(path);\n  const childObject = parent(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  const result = !(childObject != null) || delete childObject[key];\n  let previousObjRef = undefined;\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index) {\n        if (isObject(objectRef) && isEmptyObject(objectRef) || isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data)).length) {\n          previousObjRef ? delete previousObjRef[item] : delete object[item];\n        }\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return result;\n}\n\nfunction unset(object, paths) {\n  paths.forEach(path => {\n    baseUnset(object, path);\n  });\n  return object;\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  const {\n    ref,\n    ref: {\n      name,\n      type\n    },\n    mutationWatcher\n  } = field;\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  const fieldValue = fields[name];\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\n    const {\n      options\n    } = fieldValue;\n\n    if (isArray(options) && options.length) {\n      options.filter(Boolean).forEach(({\n        ref,\n        mutationWatcher\n      }, index) => {\n        if (ref && isDetached(ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, [`[${index}]`]);\n        }\n      });\n\n      if (options && !options.filter(Boolean).length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nconst defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => isArray(options) ? options.filter(Boolean).reduce((previous, {\n  ref: {\n    checked,\n    value\n  }\n}) => checked ? {\n  isValid: true,\n  value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isFileInput = element => element.type === 'file';\n\nvar isMultipleSelect = element => element.type === 'select-multiple';\n\nvar isEmptyString = value => value === '';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(({\n        ref: {\n          checked\n        }\n      }) => checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    const {\n      checked,\n      value,\n      attributes\n    } = options[0].ref;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  const {\n    name,\n    value\n  } = ref;\n  const field = fields[name];\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar isString = value => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\n  const output = {};\n\n  for (const name in fields) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : isArray(search) ? search.find(data => name.startsWith(data)) : search && search.nest)) {\n      output[name] = getFieldValue(fields, fields[name].ref);\n    }\n  }\n\n  return output;\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\n  const objectAData = Object.entries(objectA);\n  const objectBData = Object.keys(objectB);\n  return objectAData.length === objectBData.length && objectAData.reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n};\n\nvar isSameError = (error, {\n  type,\n  types,\n  message\n}) => isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n\nfunction shouldUpdateWithError({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => {\n  const isValueMessage = value => isObject(value) && !isRegex(value);\n\n  return isValueMessage(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isBoolean = value => typeof value === 'boolean';\n\nvar isMessage = value => isString(value) || isObject(value) && isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n    return Object.assign(Object.assign({}, error), {\n      types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), {\n        [type]: message || true\n      })\n    });\n  }\n\n  return {};\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, {\n  ref,\n  ref: {\n    type,\n    value,\n    name\n  },\n  options,\n  required,\n  maxLength,\n  minLength,\n  min,\n  max,\n  pattern,\n  validate\n}) => {\n  var _a;\n\n  const fields = fieldsRef.current;\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  };\n\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const {\n      value: requiredValue,\n      message: requiredMessage\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const {\n      value: maxValue,\n      message: maxMessage\n    } = getValueAndMessage(max);\n    const {\n      value: minValue,\n      message: minMessage\n    } = getValueAndMessage(min);\n\n    if (type === 'number' || !type && !isNaN(value)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(value);\n\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(value);\n\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const {\n      value: patternValue,\n      message: patternMessage\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldValue(fields, ref);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(validateResult, validateRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner) ? error.inner.reduce((previous, {\n  path,\n  message,\n  type\n}) => Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? {\n  [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message)\n} : {\n  [path]: previous[path] || Object.assign({\n    message,\n    type\n  }, validateAllFieldCriteria ? {\n    types: {\n      [type]: message || true\n    }\n  } : {})\n}), {}) : {\n  [error.path]: {\n    message: error.message,\n    type: error.type\n  }\n};\n\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\n  if (validationResolver) {\n    return validationResolver(data, context);\n  }\n\n  try {\n    return {\n      values: await validationSchema.validate(data, {\n        abortEarly: false,\n        context\n      }),\n      errors: {}\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria))\n    };\n  }\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\n  const getInnerPath = (value, key, isObject) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map((value, key) => getInnerPath(value, key)) : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\n};\n\nvar getPath$1 = (parentPath, value) => getPath(parentPath, value).flat(Infinity);\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\n  let value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n    watchFields.add(fieldName);\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? get(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar skipValidation = ({\n  isOnChange,\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted\n}) => isOnChange && isBlurEvent || isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n\nvar getFieldArrayParentName = name => name.substring(0, name.indexOf('['));\n\nvar getFieldValueByName = (fields, name) => {\n  const results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  let isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (isUndefined(dataB) || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\n\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => isMatchFieldArrayName(name, current) ? true : prev, false);\n\nvar isFileListObject = data => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\n  const observer = new MutationObserver(() => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange\n});\n\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  validationSchema,\n  validationResolver,\n  validationContext,\n  defaultValues = {},\n  submitFocusError = true,\n  validateCriteriaMode\n} = {}) {\n  const fieldsRef = useRef({});\n  const validateAllFieldCriteria = validateCriteriaMode === 'all';\n  const errorsRef = useRef({});\n  const touchedFieldsRef = useRef({});\n  const fieldArrayDefaultValues = useRef({});\n  const watchFieldsRef = useRef(new Set());\n  const dirtyFieldsRef = useRef(new Set());\n  const fieldsWithValidationRef = useRef(new Set());\n  const validFieldsRef = useRef(new Set());\n  const isValidRef = useRef(true);\n  const defaultRenderValuesRef = useRef({});\n  const defaultValuesRef = useRef(defaultValues);\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const isSubmittedRef = useRef(false);\n  const isDirtyRef = useRef(false);\n  const submitCountRef = useRef(0);\n  const isSubmittingRef = useRef(false);\n  const handleChangeRef = useRef();\n  const resetFieldArrayFunctionRef = useRef({});\n  const validationContextRef = useRef(validationContext);\n  const fieldArrayNamesRef = useRef(new Set());\n  const [, render] = useState();\n  const {\n    isOnBlur,\n    isOnSubmit,\n    isOnChange\n  } = useRef(modeChecker(mode)).current;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const shouldValidateCallback = !!(validationSchema || validationResolver);\n  const isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n  const readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit\n  } = useRef(modeChecker(reValidateMode)).current;\n  validationContextRef.current = validationContext;\n  const reRender = useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\n    let shouldReRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || shouldValidateCallback) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !get(errorsRef.current, name);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !skipReRender) {\n      reRender();\n      return true;\n    }\n  }, [reRender, shouldValidateCallback]);\n  const setFieldValue = useCallback((field, rawValue) => {\n    const ref = field.ref;\n    const options = field.options;\n    const {\n      type\n    } = ref;\n    const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref) && options) {\n      options.forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isFileInput(ref)) {\n      if (isFileListObject(value)) {\n        ref.files = value;\n      } else {\n        ref.value = value;\n      }\n    } else if (isMultipleSelect(ref)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = value.includes(checkboxRef.value)) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return !!type;\n  }, [isWeb]);\n\n  const setDirty = name => {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields) {\n      return false;\n    }\n\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\n    let isDirty = defaultRenderValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n\n    if (isFieldArray) {\n      const fieldArrayName = getFieldArrayParentName(name);\n      isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\n    return readFormStateRef.current.dirty ? isDirtyChanged : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\n  };\n\n  const setDirtyAndTouchedFields = useCallback(fieldName => {\n    if (setDirty(fieldName) || !get(touchedFieldsRef.current, fieldName) && readFormStateRef.current.touched) {\n      return !!set(touchedFieldsRef.current, fieldName, true);\n    }\n  }, []);\n  const setInternalValueBatch = useCallback((name, value, parentFieldName) => {\n    const isValueArray = isArray(value);\n\n    for (const key in value) {\n      const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\n\n      if (isObject(value[key])) {\n        setInternalValueBatch(name, value[key], fieldName);\n      }\n\n      const field = fieldsRef.current[fieldName];\n\n      if (field) {\n        setFieldValue(field, value[key]);\n        setDirtyAndTouchedFields(fieldName);\n      }\n    }\n  }, [setFieldValue, setDirtyAndTouchedFields]);\n  const setInternalValue = useCallback((name, value) => {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      setFieldValue(field, value);\n      const output = setDirtyAndTouchedFields(name);\n\n      if (isBoolean(output)) {\n        return output;\n      }\n    } else if (!isPrimitive(value)) {\n      setInternalValueBatch(name, value);\n    }\n  }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);\n  const executeValidation = useCallback(async (name, skipReRender) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    shouldRenderBaseOnError(name, error, false, skipReRender);\n    return isEmptyObject(error);\n  }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  const executeSchemaValidation = useCallback(async payload => {\n    const {\n      errors\n    } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\n    const previousFormIsValid = isValidRef.current;\n    isValidRef.current = isEmptyObject(errors);\n\n    if (isArray(payload)) {\n      payload.forEach(name => {\n        const error = get(errors, name);\n\n        if (error) {\n          set(errorsRef.current, name, error);\n        } else {\n          unset(errorsRef.current, [name]);\n        }\n      });\n      reRender();\n    } else {\n      shouldRenderBaseOnError(payload, get(errors, payload) ? {\n        [payload]: get(errors, payload)\n      } : {}, previousFormIsValid !== isValidRef.current);\n    }\n\n    return isEmptyObject(errorsRef.current);\n  }, [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationResolver, validationSchema]);\n  const triggerValidation = useCallback(async payload => {\n    const fields = payload || Object.keys(fieldsRef.current);\n\n    if (shouldValidateCallback) {\n      return executeSchemaValidation(fields);\n    }\n\n    if (isArray(fields)) {\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, true)));\n      reRender();\n      return result.every(Boolean);\n    }\n\n    return await executeValidation(fields);\n  }, [executeSchemaValidation, executeValidation, reRender, shouldValidateCallback]);\n\n  const isFieldWatched = name => isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  function setValue(names, valueOrShouldValidate, shouldValidate) {\n    let shouldRender = false;\n    const isMultiple = isArray(names);\n    (isMultiple ? names : [names]).forEach(name => {\n      const isStringFieldName = isString(name);\n      shouldRender = setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName ? valueOrShouldValidate : Object.values(name)[0]) || isMultiple ? true : isFieldWatched(name);\n    });\n\n    if (shouldRender || isMultiple) {\n      reRender();\n    }\n\n    if (shouldValidate || isMultiple && valueOrShouldValidate) {\n      triggerValidation(isMultiple ? undefined : names);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async ({\n    type,\n    target\n  }) => {\n    const name = target ? target.name : '';\n    const fields = fieldsRef.current;\n    const errors = errorsRef.current;\n    const field = fields[name];\n    const currentError = get(errors, name);\n    let error;\n\n    if (!field) {\n      return;\n    }\n\n    const isBlurEvent = type === EVENTS.BLUR;\n    const shouldSkipValidation = skipValidation({\n      hasError: !!currentError,\n      isOnChange,\n      isBlurEvent,\n      isOnSubmit,\n      isReValidateOnSubmit,\n      isOnBlur,\n      isReValidateOnBlur,\n      isSubmitted: isSubmittedRef.current\n    });\n    const shouldUpdateDirty = setDirty(name);\n    let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\n\n    if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      set(touchedFieldsRef.current, name, true);\n      shouldUpdateState = true;\n    }\n\n    if (shouldSkipValidation) {\n      return shouldUpdateState && reRender();\n    }\n\n    if (shouldValidateCallback) {\n      const {\n        errors\n      } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n      error = get(errors, name) ? {\n        [name]: get(errors, name)\n      } : {};\n\n      if (previousFormIsValid !== isValidRef.current) {\n        shouldUpdateState = true;\n      }\n    } else {\n      error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    }\n\n    if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\n      reRender();\n    }\n  };\n  const validateSchemaIsValid = useCallback((values = {}) => {\n    const fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({\n      errors\n    }) => {\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [reRender, validateAllFieldCriteria, validationResolver]);\n  const removeFieldEventListener = useCallback((field, forceDelete) => {\n    if (!isUndefined(handleChangeRef.current) && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  }, []);\n  const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    const {\n      name\n    } = field.ref;\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(data => data.current.delete(name));\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n\n      if (shouldValidateCallback) {\n        validateSchemaIsValid();\n      }\n    }\n  }, [reRender, shouldValidateCallback, validateSchemaIsValid, removeFieldEventListener]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    }\n\n    reRender();\n  }\n\n  const setInternalError = ({\n    name,\n    type,\n    types,\n    message,\n    preventRender\n  }) => {\n    const field = fieldsRef.current[name];\n\n    if (!isSameError(errorsRef.current[name], {\n      type,\n      message,\n      types\n    })) {\n      set(errorsRef.current, name, {\n        type,\n        types,\n        message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (!preventRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name, type = '', message) {\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type,\n        message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), {\n        preventRender: true\n      })));\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    const combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValuesRef.current) ? {} : defaultValuesRef.current : defaultValue;\n    const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\n    const watchFields = watchFieldsRef.current;\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => Object.assign(Object.assign({}, previous), {\n        [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)\n      }), {});\n    }\n\n    isWatchAllRef.current = true;\n    const result = !isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\n    }\n  }\n\n  function registerFieldsRef(ref, validateOptions = {}) {\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const {\n      name,\n      type,\n      value\n    } = ref;\n    const fieldAttributes = Object.assign({\n      ref\n    }, validateOptions);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let currentField = fields[name];\n    let isEmptyDefaultValue = true;\n    let isFieldArray = false;\n    let defaultValue;\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.filter(Boolean).find(({\n      ref\n    }) => value === ref.value) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\n      currentField = isRadioOrCheckbox ? Object.assign({\n        options: [...(currentField && currentField.options || []), {\n          ref,\n          mutationWatcher\n        }],\n        ref: {\n          type,\n          name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), {\n        mutationWatcher\n      });\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = get(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(currentField, defaultValue);\n      }\n    }\n\n    if (shouldValidateCallback && !isFieldArray && readFormStateRef.current.isValid) {\n      validateSchemaIsValid();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\n          const previousFormIsValid = isValidRef.current;\n\n          if (isEmptyObject(error)) {\n            validFieldsRef.current.add(name);\n          } else {\n            isValidRef.current = false;\n          }\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultRenderValuesRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultRenderValuesRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, currentField.ref) : defaultValue;\n    }\n\n    if (!type) {\n      return;\n    }\n\n    const fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n    attachEventListeners({\n      field: fieldToAttachListener,\n      isRadioOrCheckbox,\n      handleChange: handleChangeRef.current\n    });\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return ref => ref && registerFieldsRef(ref, refOrValidationOptions);\n  }\n\n  const handleSubmit = useCallback(callback => async e => {\n    if (e) {\n      e.preventDefault();\n      e.persist();\n    }\n\n    let fieldErrors = {};\n    let fieldValues = {};\n    const fields = fieldsRef.current;\n\n    if (readFormStateRef.current.isSubmitting) {\n      isSubmittingRef.current = true;\n      reRender();\n    }\n\n    try {\n      if (shouldValidateCallback) {\n        fieldValues = getFieldsValues(fields);\n        const {\n          errors,\n          values\n        } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\n        errorsRef.current = errors;\n        fieldErrors = errors;\n        fieldValues = values;\n      } else {\n        for (const field of Object.values(fields)) {\n          if (field) {\n            const {\n              ref,\n              ref: {\n                name\n              }\n            } = field;\n            const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            if (fieldError[name]) {\n              set(fieldErrors, name, fieldError[name]);\n              validFieldsRef.current.delete(name);\n            } else {\n              if (fieldsWithValidationRef.current.has(name)) {\n                validFieldsRef.current.add(name);\n              }\n\n              fieldValues[name] = getFieldValue(fields, ref);\n            }\n          }\n        }\n      }\n\n      if (isEmptyObject(fieldErrors)) {\n        errorsRef.current = {};\n        await callback(transformToNestObject(fieldValues), e);\n      } else {\n        if (submitFocusError && isWeb) {\n          focusErrorField(fields, fieldErrors);\n        }\n\n        errorsRef.current = fieldErrors;\n      }\n    } finally {\n      isSubmittedRef.current = true;\n      isSubmittingRef.current = false;\n      submitCountRef.current = submitCountRef.current + 1;\n      reRender();\n    }\n  }, [isWeb, reRender, shouldValidateCallback, submitFocusError, validateAllFieldCriteria, validationResolver, validationSchema]);\n\n  const resetRefs = ({\n    errors,\n    dirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields\n  }) => {\n    fieldsRef.current = {};\n\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!dirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = new Set();\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultRenderValuesRef.current = {};\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (values, omitResetState = {}) => {\n    if (isWeb) {\n      for (const value of Object.values(fieldsRef.current)) {\n        if (value) {\n          const {\n            ref,\n            options\n          } = value;\n          const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options) ? options[0].ref : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\n    resetRefs(omitResetState);\n    reRender();\n  };\n\n  function getValues(payload) {\n    if (isString(payload)) {\n      return fieldsRef.current[payload] ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref) : undefined;\n    }\n\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const outputValues = isEmptyObject(fieldValues) ? defaultValuesRef.current : fieldValues;\n    return payload && payload.nest ? transformToNestObject(outputValues) : outputValues;\n  }\n\n  useEffect(() => () => {\n    isUnMount.current = true;\n    fieldsRef.current && process.env.NODE_ENV === 'production' && Object.values(fieldsRef.current).forEach(field => removeFieldEventListenerAndRef(field, true));\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!shouldValidateCallback) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirty: isDirtyRef.current,\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isValidRef.current\n  };\n  const commonProps = {\n    triggerValidation,\n    setValue: useCallback(setValue, [reRender, setInternalValue, triggerValidation]),\n    register: useCallback(register, [defaultValuesRef.current, defaultRenderValuesRef.current]),\n    unregister: useCallback(unregister, []),\n    getValues: useCallback(getValues, []),\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n  const control = Object.assign(Object.assign(Object.assign({\n    removeFieldEventListener,\n    reRender\n  }, shouldValidateCallback ? {\n    validateSchemaIsValid\n  } : {}), {\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    readFormStateRef,\n    defaultValuesRef\n  }), commonProps);\n  return Object.assign({\n    watch,\n    control,\n    handleSubmit,\n    reset: useCallback(reset, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current\n  }, commonProps);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var {\n    children,\n    formState,\n    errors\n  } = _a,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState,\n      errors\n    })\n  }, children);\n}\n\nvar generateId = () => {\n  const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nconst appendId = (value, keyName) => Object.assign({\n  [keyName]: generateId()\n}, isObject(value) ? value : {\n  value\n});\n\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map(value => appendId(value, keyName));\n\nvar getSortRemovedItems = (indexes, removeIndexes, updatedIndexes = [], count = 0, notFoundIndexes = []) => {\n  for (const removeIndex of removeIndexes) {\n    if (indexes.indexOf(removeIndex) < 0) {\n      notFoundIndexes.push(removeIndex);\n    }\n  }\n\n  for (const index of indexes.sort()) {\n    if (removeIndexes.indexOf(index) > -1) {\n      updatedIndexes.push(-1);\n      count++;\n    } else {\n      updatedIndexes.push(index - count - (notFoundIndexes.length ? notFoundIndexes.map(notFoundIndex => notFoundIndex < index).filter(Boolean).length : 0));\n    }\n  }\n\n  return updatedIndexes;\n};\n\nconst removeAt = (data, index) => [...data.slice(0, index), ...data.slice(index + 1)];\n\nfunction removeAtIndexes(data, index) {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return data.filter(Boolean);\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : isArray(index) ? removeAtIndexes(data, index) : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n\nfunction prepend(data, value) {\n  return [...(isArray(value) ? value : [value || null]), ...data];\n}\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...(isArray(value) ? value : [value || null]), ...data.slice(index)];\n}\n\nvar fillEmptyArray = value => isArray(value) ? Array(value.length).fill(null) : null;\n\nconst useFieldArray = ({\n  control,\n  name,\n  keyName = 'id'\n}) => {\n  const methods = useFormContext();\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    getValues,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid\n  } = control || methods.control;\n\n  const getDefaultValues = () => [...get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)] ? fieldArrayDefaultValues.current : defaultValuesRef.current, name, [])];\n\n  const memoizedDefaultValues = useRef(getDefaultValues());\n  const [fields, setField] = useState(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = useState(false);\n  const allFields = useRef(fields);\n  const isNameKey = isKey(name);\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = values => values.map(value => appendId(value, keyName));\n\n  const setFieldAndValidState = fieldsValues => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues\n      });\n    }\n  };\n\n  const modifyDirtyFields = ({\n    shouldRender,\n    isRemove,\n    isPrePend,\n    index,\n    value = {}\n  } = {}) => {\n    let render = shouldRender;\n    const values = isArray(value) ? value : [value];\n\n    if (readFormStateRef.current.dirty) {\n      const dirtyFieldIndexesAndValues = {};\n\n      if (isPrePend || isRemove) {\n        for (const dirtyField of [...dirtyFieldsRef.current].sort()) {\n          if (isMatchFieldArrayName(dirtyField, name)) {\n            const matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\n\n            if (matchedIndexes) {\n              const matchIndex = +matchedIndexes[matchedIndexes.length - 1];\n\n              if (dirtyFieldIndexesAndValues[matchIndex]) {\n                dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\n              } else {\n                dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\n              }\n            }\n\n            dirtyFieldsRef.current.delete(dirtyField);\n          }\n        }\n      }\n\n      if (!isUndefined(index) || isPrePend) {\n        const updatedDirtyFieldIndexes = isUndefined(index) ? [] : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map(i => +i), isArray(index) ? index : [index]);\n        Object.values(dirtyFieldIndexesAndValues).forEach((values, index) => {\n          const updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\n\n          if (updateIndex > -1) {\n            for (const value of values) {\n              const matchedIndexes = value.match(REGEX_ARRAY_FIELD_INDEX);\n\n              if (matchedIndexes) {\n                dirtyFieldsRef.current.add(value.replace(/[\\d+]([^[\\d+]+)$/, `${isPrePend ? +matchedIndexes[matchedIndexes.length - 1] + values.length : updateIndex}$1`));\n              }\n            }\n          }\n        });\n      }\n\n      if (!isRemove) {\n        values.forEach((fieldValue, index) => Object.keys(fieldValue).forEach(key => dirtyFieldsRef.current.add(`${name}[${isPrePend ? index : allFields.current.length + index}].${key}`)));\n        isDirtyRef.current = true;\n      }\n\n      render = true;\n    }\n\n    if (render && !isWatchAllRef.current) {\n      reRender();\n    }\n  };\n\n  const resetFields = flagOrFields => {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  const mapCurrentFieldsValueWithState = () => {\n    const currentFieldsValue = get(getValues({\n      nest: true\n    }), name);\n\n    if (isArray(currentFieldsValue)) {\n      for (let i = 0; i < currentFieldsValue.length; i++) {\n        allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  const append = value => {\n    setFieldAndValidState([...allFields.current, ...(isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)])]);\n    modifyDirtyFields({\n      value\n    });\n  };\n\n  const prepend$1 = value => {\n    let shouldRender = false;\n    resetFields();\n    setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\n      shouldRender = true;\n    }\n\n    modifyDirtyFields({\n      shouldRender,\n      isPrePend: true,\n      value\n    });\n  };\n\n  const remove = index => {\n    let shouldRender = false;\n    const isIndexUndefined = isUndefined(index);\n\n    if (!isIndexUndefined) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(removeArrayAt(allFields.current, index));\n    setIsDeleted(true);\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n\n      if (!errorsRef.current[name].filter(Boolean).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    modifyDirtyFields({\n      shouldRender,\n      isRemove: true,\n      index\n    });\n  };\n\n  const insert$1 = (index, value) => {\n    mapCurrentFieldsValueWithState();\n    resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\n      reRender();\n    }\n  };\n\n  const swap = (indexA, indexB) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(allFields.current, indexA, indexB);\n    setFieldAndValidState([...allFields.current]);\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      reRender();\n    }\n  };\n\n  const move = (from, to) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(allFields.current, from, to);\n    setFieldAndValidState([...allFields.current]);\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      reRender();\n    }\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  useEffect(() => {\n    if (isNameKey && isDeleted && fieldArrayDefaultValues.current[name] && fields.length < fieldArrayDefaultValues.current[name].length) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n  }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\n  useEffect(() => {\n    if (isWatchAllRef && isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          break;\n        }\n      }\n    }\n  }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\n  useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    swap: useCallback(swap, [name]),\n    move: useCallback(move, [name]),\n    prepend: useCallback(prepend$1, [name]),\n    append: useCallback(append, [name]),\n    remove: useCallback(remove, [fields, name]),\n    insert: useCallback(insert$1, [name]),\n    fields\n  };\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isCheckboxInput || isUndefined(event.target.value) ? event.target.checked : event.target.value;\n\nconst Controller = _a => {\n  var {\n    name,\n    rules,\n    as: InnerComponent,\n    onBlur,\n    onChange,\n    onChangeName = VALIDATION_MODE.onChange,\n    onBlurName = VALIDATION_MODE.onBlur,\n    valueName,\n    defaultValue,\n    control,\n    onFocus\n  } = _a,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\n\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    errorsRef,\n    removeFieldEventListener,\n    triggerValidation,\n    mode: {\n      isOnSubmit,\n      isOnBlur,\n      isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    formState: {\n      isSubmitted\n    },\n    fieldsRef,\n    fieldArrayNamesRef\n  } = control || methods.control;\n  const [value, setInputStateValue] = useState(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n  const valueRef = useRef(value);\n  const isCheckboxInput = isBoolean(value);\n  const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  const rulesRef = useRef(rules);\n  const isNotFieldArray = useMemo(() => !isNameInFieldArray(fieldArrayNamesRef.current, name), [fieldArrayNamesRef, name]);\n  rulesRef.current = rules;\n\n  const shouldValidate = () => !skipValidation({\n    hasError: !!get(errorsRef.current, name),\n    isOnBlur,\n    isOnSubmit,\n    isOnChange,\n    isReValidateOnBlur,\n    isReValidateOnSubmit,\n    isSubmitted\n  });\n\n  const commonTask = event => {\n    const data = getInputValue(event, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const eventWrapper = event => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\n\n  const handleChange = event => {\n    const data = commonTask(event);\n    setValue(name, data, shouldValidate());\n  };\n\n  const registerField = useCallback(() => {\n    if (isNameInFieldArray(fieldArrayNamesRef.current, name) && fieldsRef.current[name]) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name,\n      focus: onFocus\n    }, VALUE, {\n      set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n\n      get() {\n        return valueRef.current;\n      }\n\n    }), rulesRef.current);\n  }, [fieldArrayNamesRef, fieldsRef, rulesRef, name, onFocus, register, removeFieldEventListener]);\n  useEffect(() => {\n    registerField();\n    return () => {\n      if (isNotFieldArray) {\n        unregister(name);\n      }\n    };\n  }, [name, unregister, fieldArrayNamesRef, registerField, isNotFieldArray]);\n  useEffect(() => {\n    registerField();\n  }, [registerField]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n\n      if (isNotFieldArray) {\n        setInputStateValue(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n      }\n    }\n  });\n  const props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name\n  }, rest), onChange ? {\n    [onChangeName]: eventWrapper(onChange)\n  } : {\n    [onChangeName]: handleChange\n  }), onBlur || shouldReValidateOnBlur ? {\n    [onBlurName]: (...args) => {\n      if (onBlur) {\n        onBlur(args);\n      }\n\n      if (shouldReValidateOnBlur) {\n        triggerValidation(name);\n      }\n    }\n  } : {}), {\n    [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value\n  });\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props);\n};\n\nconst ErrorMessage = _a => {\n  var {\n    as: InnerComponent,\n    errors,\n    name,\n    message,\n    children\n  } = _a,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\n\n  const methods = useFormContext();\n  const error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const {\n    message: messageFromRegister,\n    types\n  } = error;\n  const props = Object.assign(Object.assign({}, InnerComponent ? rest : {}), {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  });\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":{"version":3,"sources":["/Users/lamn/Downloads/github/redux-start/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["isValidElement","useRef","useState","useCallback","useEffect","createContext","useContext","createElement","useMemo","cloneElement","Fragment","isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","onBlur","onChange","onSubmit","VALUE","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","REGEX_ARRAY_FIELD_INDEX","attachEventListeners","field","ref","handleChange","isRadioOrCheckbox","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","get","obj","defaultValue","split","filter","Boolean","focusErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","baseGet","updatePath","baseSlice","array","start","end","parent","baseUnset","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","unset","paths","forEach","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","fieldValue","disconnect","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","selected","map","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","isString","getFieldsValues","search","output","startsWith","find","nest","compareObject","objectA","objectB","objectAData","objectBData","isSameError","error","types","message","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isValueMessage","isFunction","isBoolean","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","_a","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","e","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","flat","Infinity","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","add","skipValidation","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldArrayParentName","substring","indexOf","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","prev","isFileListObject","FileList","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","modeChecker","mode","isRadioOrCheckboxFunction","useForm","reValidateMode","validationContext","defaultValues","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","render","isWindowUndefined","shouldValidateCallback","isWeb","isProxyEnabled","Proxy","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldArray","previousDirtyFieldsLength","size","isDirty","fieldArrayName","isDirtyChanged","setDirtyAndTouchedFields","setInternalValueBatch","parentFieldName","isValueArray","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","Promise","all","every","isFieldWatched","setValue","valueOrShouldValidate","shouldValidate","isMultiple","isStringFieldName","target","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validateSchemaIsValid","then","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","preventDefault","persist","fieldError","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","getValues","outputValues","process","env","NODE_ENV","formState","commonProps","prop","control","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","useFormContext","FormContext","children","restMethods","Provider","generateId","d","performance","now","c","r","Math","random","appendId","keyName","mapIds","getSortRemovedItems","indexes","removeIndexes","updatedIndexes","count","notFoundIndexes","removeIndex","sort","notFoundIndex","removeAt","removeAtIndexes","removeArrayAt","moveArrayAt","from","to","splice","swapArrayAt","indexA","indexB","temp","prepend","insert","fillEmptyArray","fill","useFieldArray","methods","getDefaultValues","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","appendValueWithKey","setFieldAndValidState","fieldsValues","modifyDirtyFields","isRemove","isPrePend","dirtyFieldIndexesAndValues","dirtyField","matchedIndexes","matchIndex","updatedDirtyFieldIndexes","updateIndex","resetFields","flagOrFields","mapCurrentFieldsValueWithState","currentFieldsValue","append","prepend$1","remove","isIndexUndefined","fieldIndex","isFound","isLast","isCurrentIndex","currentFieldName","previousFieldName","insert$1","swap","move","pop","watchField","resetFunctions","fieldArrayNames","getInputValue","event","isCheckboxInput","Controller","rules","as","InnerComponent","onChangeName","onBlurName","valueName","onFocus","rest","setInputStateValue","valueRef","shouldReValidateOnBlur","rulesRef","isNotFieldArray","commonTask","eventWrapper","arg","registerField","defineProperty","props","args","ErrorMessage","messageFromRegister","messages"],"mappings":"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","sourcesContent":["import { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, useMemo, cloneElement, Fragment } from 'react';\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\r\nconst REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners({ field: { ref }, handleChange, isRadioOrCheckbox, }) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (isArray(objectRef) &&\r\n                        !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\r\n                            .length)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach((path) => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options\r\n                .filter(Boolean)\r\n                .forEach(({ ref, mutationWatcher }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.filter(Boolean).reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMultipleSelect = (element) => element.type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : isArray(search)\r\n                    ? search.find((data) => name.startsWith(data))\r\n                    : search && search.nest)) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\r\n    const objectAData = Object.entries(objectA);\r\n    const objectBData = Object.keys(objectB);\r\n    return (objectAData.length === objectBData.length &&\r\n        objectAData.reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true));\r\n};\n\nvar isSameError = (error, { type, types, message, }) => isObject(error) &&\r\n    error.type === type &&\r\n    error.message === message &&\r\n    compareObject(error.types, types);\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isValueMessage = (value) => isObject(value) && !isRegex(value);\r\n    return isValueMessage(validationData)\r\n        ? validationData\r\n        : {\r\n            value: validationData,\r\n            message: '',\r\n        };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (validateAllFieldCriteria) {\r\n        const error = errors[name];\r\n        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n    }\r\n    return {};\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    var _a;\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\r\n        const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => getPath(parentPath, value).flat(Infinity);\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? get(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||\r\n    (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nvar isFileListObject = (data) => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const fieldArrayDefaultValues = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateCallback = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    validationContextRef.current = validationContext;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateCallback) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateCallback]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const ref = field.ref;\r\n        const options = field.options;\r\n        const { type } = ref;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isFileListObject(value)) {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return !!type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = getFieldArrayParentName(name);\r\n            isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    };\r\n    const setDirtyAndTouchedFields = useCallback((fieldName) => {\r\n        if (setDirty(fieldName) ||\r\n            (!get(touchedFieldsRef.current, fieldName) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, fieldName, true);\r\n        }\r\n    }, []);\r\n    const setInternalValueBatch = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            if (isObject(value[key])) {\r\n                setInternalValueBatch(name, value[key], fieldName);\r\n            }\r\n            const field = fieldsRef.current[fieldName];\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirtyAndTouchedFields(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirtyAndTouchedFields]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirtyAndTouchedFields(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValueBatch(name, value);\r\n        }\r\n    }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        shouldRenderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach((name) => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            shouldRenderBaseOnError(payload, (get(errors, payload)\r\n                ? { [payload]: get(errors, payload) }\r\n                : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateCallback) {\r\n            return executeSchemaValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateCallback,\r\n    ]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isMultiple = isArray(names);\r\n        (isMultiple\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isMultiple\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isMultiple) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isMultiple && valueOrShouldValidate)) {\r\n            triggerValidation(isMultiple ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isOnChange,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (shouldValidateCallback) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldUpdateState = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => {\r\n        if (!isUndefined(handleChangeRef.current) && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [\r\n            name,\r\n        ]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach((data) => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateCallback) {\r\n                validateSchemaIsValid();\r\n            }\r\n        }\r\n    }, [\r\n        reRender,\r\n        shouldValidateCallback,\r\n        validateSchemaIsValid,\r\n        removeFieldEventListener,\r\n    ]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach((error) => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValuesRef.current)\r\n                ? {}\r\n                : defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) || combinedDefaultValues;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach((fieldName) => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options\r\n                    .filter(Boolean)\r\n                    .find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\r\n            currentField = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = get(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(currentField, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateCallback &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, currentField).then((error) => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = {};\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateCallback) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fields)) {\r\n                    if (field) {\r\n                        const { ref, ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            validFieldsRef.current.delete(name);\r\n                        }\r\n                        else {\r\n                            if (fieldsWithValidationRef.current.has(name)) {\r\n                                validFieldsRef.current.add(name);\r\n                            }\r\n                            fieldValues[name] = getFieldValue(fields, ref);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError && isWeb) {\r\n                    focusErrorField(fields, fieldErrors);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateCallback,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        fieldsRef.current = {};\r\n        if (!errors) {\r\n            errorsRef.current = {};\r\n        }\r\n        if (!touched) {\r\n            touchedFieldsRef.current = {};\r\n        }\r\n        if (!isValid) {\r\n            validFieldsRef.current = new Set();\r\n            fieldsWithValidationRef.current = new Set();\r\n            isValidRef.current = true;\r\n        }\r\n        if (!dirty) {\r\n            isDirtyRef.current = false;\r\n        }\r\n        if (!dirtyFields) {\r\n            dirtyFieldsRef.current = new Set();\r\n        }\r\n        if (!isSubmitted) {\r\n            isSubmittedRef.current = false;\r\n        }\r\n        if (!submitCount) {\r\n            submitCountRef.current = 0;\r\n        }\r\n        defaultRenderValuesRef.current = {};\r\n        fieldArrayDefaultValues.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const value of Object.values(fieldsRef.current)) {\r\n                if (value) {\r\n                    const { ref, options } = value;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs(omitResetState);\r\n        reRender();\r\n    };\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return fieldsRef.current[payload]\r\n                ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref)\r\n                : undefined;\r\n        }\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    }\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            process.env.NODE_ENV === 'production' &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateCallback) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const commonProps = {\r\n        triggerValidation,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultRenderValuesRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        getValues: useCallback(getValues, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = Object.assign(Object.assign(Object.assign({ removeFieldEventListener,\r\n        reRender }, (shouldValidateCallback ? { validateSchemaIsValid } : {})), { mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n            isOnChange,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        isWatchAllRef,\r\n        watchFieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayDefaultValues,\r\n        validFieldsRef,\r\n        dirtyFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef }), commonProps);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearError: useCallback(clearError, []), setError: useCallback(setError, []), errors: errorsRef.current }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign({ [keyName]: generateId() }, (isObject(value) ? value : { value })));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nvar getSortRemovedItems = (indexes, removeIndexes, updatedIndexes = [], count = 0, notFoundIndexes = []) => {\r\n    for (const removeIndex of removeIndexes) {\r\n        if (indexes.indexOf(removeIndex) < 0) {\r\n            notFoundIndexes.push(removeIndex);\r\n        }\r\n    }\r\n    for (const index of indexes.sort()) {\r\n        if (removeIndexes.indexOf(index) > -1) {\r\n            updatedIndexes.push(-1);\r\n            count++;\r\n        }\r\n        else {\r\n            updatedIndexes.push(index -\r\n                count -\r\n                (notFoundIndexes.length\r\n                    ? notFoundIndexes\r\n                        .map((notFoundIndex) => notFoundIndex < index)\r\n                        .filter(Boolean).length\r\n                    : 0));\r\n        }\r\n    }\r\n    return updatedIndexes;\r\n};\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return data.filter(Boolean);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(isArray(value) ? value : [value || null]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(isArray(value) ? value : [value || null]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : null;\n\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { isWatchAllRef, resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, dirtyFieldsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldsRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValues, validateSchemaIsValid, } = control || methods.control;\r\n    const getDefaultValues = () => [\r\n        ...get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\r\n            ? fieldArrayDefaultValues.current\r\n            : defaultValuesRef.current, name, []),\r\n    ];\r\n    const memoizedDefaultValues = useRef(getDefaultValues());\r\n    const [fields, setField] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    const [isDeleted, setIsDeleted] = useState(false);\r\n    const allFields = useRef(fields);\r\n    const isNameKey = isKey(name);\r\n    allFields.current = fields;\r\n    if (isNameKey) {\r\n        fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\r\n    }\r\n    const appendValueWithKey = (values) => values.map((value) => appendId(value, keyName));\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const modifyDirtyFields = ({ shouldRender, isRemove, isPrePend, index, value = {}, } = {}) => {\r\n        let render = shouldRender;\r\n        const values = isArray(value) ? value : [value];\r\n        if (readFormStateRef.current.dirty) {\r\n            const dirtyFieldIndexesAndValues = {};\r\n            if (isPrePend || isRemove) {\r\n                for (const dirtyField of [...dirtyFieldsRef.current].sort()) {\r\n                    if (isMatchFieldArrayName(dirtyField, name)) {\r\n                        const matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\r\n                        if (matchedIndexes) {\r\n                            const matchIndex = +matchedIndexes[matchedIndexes.length - 1];\r\n                            if (dirtyFieldIndexesAndValues[matchIndex]) {\r\n                                dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\r\n                            }\r\n                            else {\r\n                                dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\r\n                            }\r\n                        }\r\n                        dirtyFieldsRef.current.delete(dirtyField);\r\n                    }\r\n                }\r\n            }\r\n            if (!isUndefined(index) || isPrePend) {\r\n                const updatedDirtyFieldIndexes = isUndefined(index)\r\n                    ? []\r\n                    : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map((i) => +i), isArray(index) ? index : [index]);\r\n                Object.values(dirtyFieldIndexesAndValues).forEach((values, index) => {\r\n                    const updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\r\n                    if (updateIndex > -1) {\r\n                        for (const value of values) {\r\n                            const matchedIndexes = value.match(REGEX_ARRAY_FIELD_INDEX);\r\n                            if (matchedIndexes) {\r\n                                dirtyFieldsRef.current.add(value.replace(/[\\d+]([^[\\d+]+)$/, `${isPrePend\r\n                                    ? +matchedIndexes[matchedIndexes.length - 1] +\r\n                                        values.length\r\n                                    : updateIndex}$1`));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (!isRemove) {\r\n                values.forEach((fieldValue, index) => Object.keys(fieldValue).forEach((key) => dirtyFieldsRef.current.add(`${name}[${isPrePend ? index : allFields.current.length + index}].${key}`)));\r\n                isDirtyRef.current = true;\r\n            }\r\n            render = true;\r\n        }\r\n        if (render && !isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = get(getValues({ nest: true }), name);\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        setFieldAndValidState([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n        modifyDirtyFields({ value });\r\n    };\r\n    const prepend$1 = (value) => {\r\n        let shouldRender = false;\r\n        resetFields();\r\n        setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n            shouldRender = true;\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isPrePend: true,\r\n            value,\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        let shouldRender = false;\r\n        const isIndexUndefined = isUndefined(index);\r\n        if (!isIndexUndefined) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(removeArrayAt(allFields.current, index));\r\n        setIsDeleted(true);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isRemove: true,\r\n            index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n            reRender();\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n            reRender();\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = getDefaultValues();\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect(() => {\r\n        if (isNameKey &&\r\n            isDeleted &&\r\n            fieldArrayDefaultValues.current[name] &&\r\n            fields.length < fieldArrayDefaultValues.current[name].length) {\r\n            fieldArrayDefaultValues.current[name].pop();\r\n        }\r\n    }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\r\n    useEffect(() => {\r\n        if (isWatchAllRef && isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n        else if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    reRender();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [fields, name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const rulesRef = useRef(rules);\r\n    const isNotFieldArray = useMemo(() => !isNameInFieldArray(fieldArrayNamesRef.current, name), [fieldArrayNamesRef, name]);\r\n    rulesRef.current = rules;\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isOnChange,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = useCallback(() => {\r\n        if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&\r\n            fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name, focus: onFocus }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), rulesRef.current);\r\n    }, [\r\n        fieldArrayNamesRef,\r\n        fieldsRef,\r\n        rulesRef,\r\n        name,\r\n        onFocus,\r\n        register,\r\n        removeFieldEventListener,\r\n    ]);\r\n    useEffect(() => {\r\n        registerField();\r\n        return () => {\r\n            if (isNotFieldArray) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, [name, unregister, fieldArrayNamesRef, registerField, isNotFieldArray]);\r\n    useEffect(() => {\r\n        registerField();\r\n    }, [registerField]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            if (isNotFieldArray) {\r\n                setInputStateValue(isUndefined(defaultValue)\r\n                    ? get(defaultValuesRef.current, name)\r\n                    : defaultValue);\r\n            }\r\n        }\r\n    });\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"]},"metadata":{},"sourceType":"module"}